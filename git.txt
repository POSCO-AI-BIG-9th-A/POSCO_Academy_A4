1.깃이란?
깃과 같은 버전관리 앱은 그런 일을 방지한다. 당신과 동료는 같은 페이지에 각자의 수정사항을 각각 업로드할 수 있고, 깃은 두 개의 복사본을 저장한다. 나중에, 당신들은 그대로 어떤 작업도 잃어버리지 않고 변경사항들을 병합할 수 있다. 깃은 이전에 만들어진 모든 변경사항의 “스냅샷”을 저장하기 때문에 이전 시점의 어떤 버전으로 되돌릴 수도 있다.

2.깃허브의 장점
 2-1.깃허브 소트프웨어를 다운로드하면, 로컬에서 당신의 프로젝트를 관리할 수 있게하는 비주얼 인터페이스를 제공한다.
 2-2.Github.com에 계정을 생성하면 웹에서 프로젝트를 버전관리할 수 있으며, 평가측정 등의 소셜 네트워크 기능을 사용할 수 있다.


3.기본 용어
 -Command Line:깃 명령어를 입력할 때 사용
 -Repository:프로젝트가 거주할 수 있는 디렉토리나 저장 공간
 -Version Control:깃이 서비스되도록 고안된 목적
 -Commit:깃에게 파워를 주는 명령
 -Branch:작업자들은 메인 프로젝트의 브랜치를 따와서(Branch off) 자신이 변경하고 싶은 자신만의 버전을 만듦

4.주요 명령어
 -git init:깃 저장소를 초기화한다.이 것을 입력해야 다음 깃 명령어를 줄 수 있음
 -git config:처음에 깃을 설정할 때 가장 유용함
 -git help:커맨드라인에 입력하면 21개의 가장 많이 사용되는 깃 명령어들을 나타냄
 -git status:저장소 상태를 확인함
 -git add:이 명령이 저장소에 새 파일을 추가하진 않음. 대신, 깃이 새 파일들을 지켜보게 함
 -git commit:깃의 가장 중요한 명령어.어떤 변경사항이라도 만든 후, 저장소의 "스냅샷"을 찍기 위해 이것을 입력
 -git branch:새로운 브랜치를 만들고, 자신만의 변경사항과 파일 추가 등의 커밋 타임라인을 만듦
 -git checkout:글자 그대로, 현재 위치하고 있지 않은 저장소를 "체크아웃"할 수 있음
 -git merge:브랜치에서 작업을 끝내고,모든 협업자가 볼 수 있는 master 브랜치로 병합 할 수 있음
 -git push:로컬 컴퓨터에서 작업한 커밋을 온라인에 연결
 -git pull: 로컬 컴퓨터 작업시. 저장소의 최신버전을 원할 때, 깃허브로부터 변경사항을 다운로드
 
5.깃/깃허브 설정하기
 - GitHub.com 가입
 - git config --global user.name "Your Name Here"
 - git config --global user.email "your_email@youremail.com"
 - 